

* 정렬 알고리즘
유형 1 - 정렬 라이브러리로 풀 수 있는 문제
유형 2 - 정렬 알고리즘의 원리에 대해서 물어보는 문제
유형 3 - 더 빠른 정렬이 필요한 문제
    : 퀵정렬 기반의 정렬 기법으로는 풀 수 없고 
    : 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야하는 문제


1. 삽입정렬
2. 선택정렬
3. 퀵정렬
4. 계수 정렬


python에서 구현하는 방법 



** 선택 정렬
    시간복잡도 : O(N^2)

    --> 파이썬의 기본 정렬 라이브러리를 포함해서 매우 비효율적인 정렬 알고리즘
    --> 그러나 특정한 리스트에서 가장 작은 데이터를 찾는 일이 많아서 작성할 줄은 알아야함

----------------------------------------------------------
array = [7,5,9,0,3,1,6,2,4,8]

for i in range(len(array)):
    min_index = i
    for j in range(i+1, len(array)):
        if array[min_index] > array[j]:
            min_index = j
    
    array[i], array[min_index] = array[min_index], array[i]

print(array)
----------------------------------------------------------


** 삽입 정렬
- 데이터를 하나씩 확인하며, 각 데이터를 적절한 위치에 삽입한다
- 필요할 때만 위치를 바꾼다
- 데이터가 거의 정렬 되어 있을 때 ; 훨씬 효율적

시간복잡도 : O(N^2)
    if 어느 정도 정렬되어있다면 최선의 경우 O(N)까지도 가능
        어느 정도 정렬만 되어있다면 퀵정렬이나 다른 정렬 알고리즘을 이용하는 것보다 훨씬 빠르다 


----------------------------------------------------------
array = [7,5,9,0,3,1,6,2,4,8]

for i in range(len(array)):
    for j in range(i,0,-1):
        if array[j] < array[j-1]:
            array[j], array[j-1] = array[j-1], array[j]
        else:
            break
    
print(array)
----------------------------------------------------------


** 퀵 정렬
- 가장 많이 사용되는 알고리즘
- 기준 데이터를 설정하고 그 기주놉다 큰 데이터와 작은 데이터의 위치를 바꾼다

시간 복잡도 :
    평균 - O(NlogN)
    최악 - O(N^2)

----------------------------------------------------------
array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]
def quick_sort(array, start , end):
    # 원소가1개인경우종료
    if start >=end: 
        return
    pivot = start#피벗은첫번째원소 
    left = start + 1
    right = end
    while left <= right:
        # 피벗보다 큰 데이터를 찾을 때까지 반복
        while left <= end and array[left] <= array[pivot]:
            left += 1
        # 피벗보다 작은 데이터를 찾을 때까지 반복
        while right > start and array[right] >= array[pivot]: 
            right =- 1
        # 엇갈렸다면 작은 데이터와 피벗을 교체
        if left > right
            array[right], array[pivot] = array[pivot], array[right] 
        # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
        else:
            array[left], array[right] = array[right], array[left]
    
    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right - 1) 
    quick_sort(array, right + 1, end)

quick_sort(array, 0, len(array)-1)
print(array)
----------------------------------------------------------




** 계수 정렬(Count Sort)
- 특정한 조건이 부합할 때 ; 매우 빠른 정렬 알고리즘

(조건) 데이터의 개수가 N, 데이터 중 최댓값이 K
시간복잡도 : O(N+K)